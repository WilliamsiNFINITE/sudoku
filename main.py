# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from numpy import *
from random import *
from solverwindow import *
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from generateur import *

class Ui_MainWindow(object):

    def newGame(self):
        """
        This method shows the Sudoku Grid interface
        """
        SudokuUi.setupUiNumber(NewGameWindow,self.L.value(), self.l.value())
        NewGameWindow.show()

    def solverAffichage(self):
        """
        This method shows the Solver Interface
        """
        SolverUi.setupUi(SolverWindow, self.L.value(), self.l.value())
        SolverWindow.show()


    def sauvegarde(self):
        """
        This method allows the player to save his game in a txt file
        """
        self.updateBoard()
        f = open('Sauvegarde.txt', 'w')
        f2 = open('SauvegardeInitiale.txt', 'w')
        L, l, L2, l2 = len(self.board), len(self.board[0]), len(self.boardInitial), len(self.boardInitial[0])

        for i in range(L):
            for j in range(l):
                if self.board[i][j]=="":
                    f.write(str(0) + '\t')
                else :
                    f.write(str(self.board[i][j]) + '\t')
                if self.boardInitial[i][j] == "":
                    f2.write(str(0) + '\t')
                else:
                    f2.write(str(self.boardInitial[i][j]) + '\t')
            f.write('\n')
            f2.write('\n')
        f.close()



        msg = QMessageBox()
        msg.setText("Partie Sauvegard√©e")
        msg.setIcon(QMessageBox.Question)
        msg.exec_()

    def recuperation(self):
        """
        This method loads the previous Sudoku game
        """
        SudokuUi.setupUiNumber(NewGameWindow, self.L.value(), self.l.value(), "Charger")
        NewGameWindow.show()

    def raz(self):
        """
        This method reset the current Sudoku grid to its initial values
        """
        SudokuUi.setupUiNumber(NewGameWindow, self.L.value(), self.l.value(), "InitialGame")
        NewGameWindow.show()

    def setupUiNumber(self, MainWindow, row=2, column=2, case="NewGame"):
        """
        This method builds the interface of the Sudoku grid
        """
        self.hauteur = row
        self.largeur = column
        self.dimension = row * column
        if case != "Solution":
            self.board = []
            self.boxes = {}
            MainWindow.resize(445, 500)
        else:
            self.boxesSolution = {}
            MainWindow.resize(445, 450)

        font = QtGui.QFont()
        font.setPointSize(16)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(250, 250, 250))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        MainWindow.setPalette(palette)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)

        "This next part consists in determining the board/grid to generate (generetadBoard) in function of the player's choice"
        if case == 'NewGame':
            generatedBoard = generation(self.hauteur, self.largeur)  # ERASE
            print("newgame",generatedBoard)
            self.solvedBoard = array(solveGen(generatedBoard, self.hauteur, self.largeur)[0])
        elif case == 'InitialGame':
            generatedBoard = self.boardInitial
        elif case == 'Solution':
            generatedBoard = self.solvedBoard
        elif case == 'Charger':
            data = loadtxt("Sauvegarde.txt")
            L = len(data)
            l = len(data[0])
            generatedBoard = zeros((L, l))
            for i in range(L):
                for j in range(l):
                    generatedBoard[i][j] = int(data[i][j])
            self.solvedBoard = array(solveGen(generatedBoard, self.hauteur, self.largeur)[0])
        elif case == 'Hint':
            generatedBoard = self.hintBoard
            #le probleme n'est pas la
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)

        "This next part determines what will be the initial board which is used if the player wants to star from the begenning"
        if case == "Charger":
            data = np.loadtxt("SauvegardeInitiale.txt")
            L = len(data)
            l = len(data[0])
            self.boardInitial = zeros((L, l))
            for i in range(L):
                for j in range(l):
                    self.boardInitial[i][j] = int(data[i][j])
            self.boardInitial = self.boardInitial.reshape((self.dimension, self.dimension))

        "This next part defines the Sudoku grid itself"
        yPosition = -30

        for i in range(self.dimension):  # row
            xPosition = -20
            yPosition += 40
            if i % self.hauteur == 0:
                yPosition += 10
            for j in range(self.dimension):
                xPosition += 40
                if j % self.largeur == 0:
                    xPosition += 10

                if ((i // self.hauteur) + (j // self.largeur)) % 2 == 0:
                    brush = QtGui.QBrush(QtGui.QColor(215, 215, 215))
                else:
                    brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
                palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
                brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
                # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)

                if case == "NewGame" or case =="InitialGame" or case =="Charger":
                    self.boxes[(i, j)] = QtWidgets.QPlainTextEdit(self.centralwidget)
                    self.boxes[(i, j)].setGeometry(xPosition, yPosition, 41, 41)
                    self.boxes[(i, j)].setFont(font)
                    self.boxes[(i, j)].setPalette(palette)
                    self.boxes[(i, j)].setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
                    self.boxes[(i, j)].setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
                    if generatedBoard[i][j] == 0 or generatedBoard[i][j] == "":
                        self.boxes[(i, j)].setPlainText("")

                        font.setItalic(True)
                        font.setBold(False)
                    else:
                        self.boxes[(i, j)].setPlainText(str(int(generatedBoard[i][j])))
                        font.setBold(True)
                        font.setItalic(False)
                    self.boxes[(i, j)].setFont(font)
                    self.boxes[(i, j)].setTabChangesFocus(True)
                    self.board.append(self.boxes[(i, j)].toPlainText())
                elif case == "Hint":
                    self.boxes[(i, j)] = QtWidgets.QPlainTextEdit(self.centralwidget)
                    self.boxes[(i, j)].setGeometry(xPosition, yPosition, 41, 41)
                    self.boxes[(i, j)].setFont(font)
                    self.boxes[(i, j)].setPalette(palette)
                    self.boxes[(i, j)].setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
                    self.boxes[(i, j)].setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
                    if generatedBoard[i][j] == 0 or generatedBoard[i][j] == "":
                        self.boxes[(i, j)].setPlainText("")
                        font.setItalic(True)
                        font.setBold(False)
                    else:
                        if self.boardInitial[i][j] != generatedBoard[i][j]:
                            font.setItalic(True)
                            font.setBold(False)
                        else:
                            font.setBold(True)
                            font.setItalic(False)
                        self.boxes[(i, j)].setPlainText(str(int(generatedBoard[i][j])))
                    self.boxes[(i, j)].setFont(font)
                    self.boxes[(i, j)].setTabChangesFocus(True)
                    self.board.append(self.boxes[(i, j)].toPlainText())
                elif case == "Solution":
                    self.boxesSolution[(i, j)] = QtWidgets.QPlainTextEdit(self.centralwidget)
                    self.boxesSolution[(i, j)].setGeometry(xPosition, yPosition, 41, 41)
                    self.boxesSolution[(i, j)].setFont(font)
                    self.boxesSolution[(i, j)].setPalette(palette)
                    self.boxesSolution[(i, j)].setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
                    self.boxesSolution[(i, j)].setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
                    self.boxesSolution[(i, j)].setFont(font)
                    self.boxesSolution[(i, j)].setTabChangesFocus(True)
                    self.boxesSolution[(i, j)].setEnabled(False)
                    self.boxesSolution[(i, j)].setPlainText(str(int(generatedBoard[i][j])))

        # print("self.genbord", generatedBoard)
        "This next part determines what will be the initial board which is used if the player wants to star from the begenning"
        if case == 'NewGame' :
            self.boardInitial = self.board
            self.boardInitial = array(self.boardInitial)
            self.boardInitial = self.boardInitial.reshape((self.dimension, self.dimension))



        "This next part creates different elements (buttons, etc...) for the interface"
        if case != "Solution":
            self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
            self.verticalLayout = QtWidgets.QVBoxLayout()
            self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
            spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
            self.horizontalLayout_2.addItem(spacerItem)

            self.verificationButton = QtWidgets.QPushButton(self.centralwidget)
            self.horizontalLayout_2.addWidget(self.verificationButton)

            self.solutionButton = QtWidgets.QPushButton(self.centralwidget)
            self.horizontalLayout_2.addWidget(self.solutionButton)

            self.hintButton = QtWidgets.QPushButton(self.centralwidget)
            self.horizontalLayout_2.addWidget(self.hintButton)

            spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
            self.horizontalLayout_2.addItem(spacerItem1)
            self.verticalLayout.addLayout(self.horizontalLayout_2)
            self.gridLayout_2.addLayout(self.verticalLayout, 1, 0, 1, 1)
            self.gridLayout_2.addWidget(self.frame, 0, 0, 1, 1)
            self.horizontalLayout = QtWidgets.QHBoxLayout()
            spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
            self.horizontalLayout.addItem(spacerItem2)

            self.sauverButton = QtWidgets.QPushButton(self.centralwidget)
            self.horizontalLayout.addWidget(self.sauverButton)

            self.menuButton = QtWidgets.QPushButton(self.centralwidget)
            self.horizontalLayout.addWidget(self.menuButton)

            self.razButton = QtWidgets.QPushButton(self.centralwidget)
            self.horizontalLayout.addWidget(self.razButton)

            spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
            self.horizontalLayout.addItem(spacerItem3)
            self.gridLayout_2.addLayout(self.horizontalLayout, 2, 0, 1, 1)
            MainWindow.setCentralWidget(self.centralwidget)

            self.menuBar = QtWidgets.QMenuBar(MainWindow)
            self.menuBar.setGeometry(QtCore.QRect(0, 0, 433, 21))
            MainWindow.setMenuBar(self.menuBar)

            self.menufiles = QtWidgets.QMenu(self.menuBar)
            MainWindow.setMenuBar(self.menuBar)

            self.actionHelp = QtWidgets.QAction(MainWindow)
            self.menufiles.addAction(self.actionHelp)
            self.menuBar.addAction(self.menufiles.menuAction())

            self.hintButton.clicked.connect(self.hint)
            self.verificationButton.clicked.connect(self.verification)
            self.solutionButton.clicked.connect(self.solution)
            self.sauverButton.clicked.connect(self.sauvegarde)
            self.menuButton.clicked.connect(self.menu)
            self.razButton.clicked.connect(self.raz)
        else:
            self.gridLayout_2.addWidget(self.frame, 0, 0, 1, 1)
            MainWindow.setCentralWidget(self.centralwidget)
            self.menubar = QtWidgets.QMenuBar(MainWindow)
            self.menubar.setGeometry(QtCore.QRect(0, 0, 412, 21))
            MainWindow.setMenuBar(self.menubar)
            self.statusbar = QtWidgets.QStatusBar(MainWindow)
            MainWindow.setStatusBar(self.statusbar)

        self.actionHelp.triggered.connect(self.helpSudoku)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def verification(self):
        """
        This method verify if the Sudoku grid is correctly completed
        """
        self.updateBoard()
        message = QMessageBox()
        alea = randint(0, 9)
        print("voil√† le test", test_total(self.board))


        if test_total(self.board) == "a": #0:
            message.setText("Veuillez termienr la grille avant de la v√©rifier svp")
        elif test_total(self.board) == "b":  #None:
            message.setText("Veuillez remplir avec des symboles valides svp")
        elif test_total(self.board) =="f":
            fil1 = open("citations_reu.txt", "r")
            lignes_reussite = fil1.readlines()
            #print(lignes_reussite[alea])
            message.setText("Vous avez r√©ussi !!! \n " + "\n" + lignes_reussite[alea])
        elif test_total(self.board) == "c" or test_total(self.board) == "d" or test_total(self.board) == "e":
            fil2 = open("citations_ech.txt", "r")
            lignes_echec = fil2.readlines()
            #print(lignes_echec[alea])
            message.setText("Vous avez √©chou√©... \n " + "\n" +lignes_echec[alea])
        message.exec_()

    def updateBoard(self):
        """
        This method updates the board to match the values currently displayed on the Sudoku window
        """
        self.board = []
        for i in range(self.dimension):  # row
            for j in range(self.dimension):
                self.board.append(self.boxes[(i, j)].toPlainText())

        self.board = array(self.board)
        self.board = self.board.reshape((self.dimension, self.dimension))

    def hint(self):
        """
        This method fills one random blank spot of the Sudoku grid
        """
        self.updateBoard()
        self.hintBoard = copy.deepcopy(self.board)

        ListCoordManquantes = where(self.hintBoard == "")
        ligneCoordManquantes = list(ListCoordManquantes[0])
        colonneCoordManquantes = list(ListCoordManquantes[1])

        if ligneCoordManquantes != []:
            i = randint(0,len(ligneCoordManquantes)-1)
            x,y = ligneCoordManquantes.pop(i), colonneCoordManquantes.pop(i)
            self.hintBoard[x][y] = self.solvedBoard[x][y]
            self.board[x][y] = self.solvedBoard[x][y]
        # print("done bitch", print(self.hintBoard))

        SudokuUi.setupUiNumber(NewGameWindow, self.L.value(), self.l.value(), "Hint")
        NewGameWindow.show()

    def menu(self):
        """
        This method shows the menu of the game
        """
        AccueilWindow.show()

    def solution(self):
        """
        This method shows the Window with the solution of the current Sudoku game
        """
        SudokuUi.setupUiNumber(SolutionWindow,self.L.value(),self.l.value(),"Solution")
        SolutionWindow.show()

    def helpSudoku(self):
        """
        This method sends indication about the game
        """
        msg = QMessageBox()
        msg.setText("Indice : Remplit al√©atoirement une case vide \n\n"
                    +"V√©rifier : V√©rifie l'ensemble de la grille de Sudoku apr√®s son remplissage \n\n"
                    +"Solver : Affiche la grille permettant de r√©soudre un sudoku \n\n"
                    +"Nouvelle Partie : D√©marre une nouvelle partie avec les dimensions indiqu√©e par 'hauteur' et 'largeur'")
        msg.setIcon(QMessageBox.Question)
        msg.exec_()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.verificationButton.setText(_translate("MainWindow", "V√©rifier"))
        self.solutionButton.setText(_translate("MainWindow", "Solution"))
        self.hintButton.setText(_translate("MainWindow", "Indice"))
        self.sauverButton.setText(_translate("MainWindow", "Sauvergarder"))
        self.menuButton.setText(_translate("MainWindow", "Menu"))
        self.razButton.setText(_translate("MainWindow", "RAZ"))
        self.actionHelp.setText(_translate("principale_ihm", "r√®gles et utilisation"))
        self.menufiles.setTitle(_translate("Mainwindow", "help"))

    def accueil(self, MainWindow):
        """
        This method builds the interface of the menu of the game
        """
        MainWindow.resize(425, 148)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.labelTitre = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.labelTitre.setFont(font)
        self.labelTitre.setAlignment(QtCore.Qt.AlignCenter)
        self.horizontalLayout_2.addWidget(self.labelTitre)
        self.gridLayout.addLayout(self.horizontalLayout_2, 1, 0, 1, 1)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.solverButtonAccueil = QtWidgets.QPushButton(self.centralwidget)
        self.horizontalLayout.addWidget(self.solverButtonAccueil)

        self.lastGameButton = QtWidgets.QPushButton(self.centralwidget)
        self.horizontalLayout.addWidget(self.lastGameButton)

        self.newGameButtonAccueil = QtWidgets.QPushButton(self.centralwidget)
        self.horizontalLayout.addWidget(self.newGameButtonAccueil)

        self.label_hauteur_accueil = QtWidgets.QLabel(self.centralwidget)
        self.label_hauteur_accueil.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.horizontalLayout.addWidget(self.label_hauteur_accueil)
        self.L = QtWidgets.QSpinBox(self.centralwidget)
        self.L.setMinimum(1)
        self.L.setMaximum(4)
        self.L.setProperty("value", 2)

        self.horizontalLayout.addWidget(self.L)
        self.label_largeur_accueil = QtWidgets.QLabel(self.centralwidget)
        self.horizontalLayout.addWidget(self.label_largeur_accueil)
        self.l = QtWidgets.QSpinBox(self.centralwidget)
        self.l.setMinimum(1)
        self.l.setMaximum(4)
        self.l.setProperty("value", 3)

        self.horizontalLayout.addWidget(self.l)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.gridLayout.addLayout(self.verticalLayout, 2, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        MainWindow.setStatusBar(self.statusbar)

        self.newGameButtonAccueil.clicked.connect(self.newGame)
        self.solverButtonAccueil.clicked.connect(self.solverAffichage)  # TO CHANGE
        self.lastGameButton.clicked.connect(self.recuperation)

        self.retranslateUiaccueil(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUiaccueil(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.labelTitre.setText(_translate("MainWindow", "SUDOKU"))
        self.solverButtonAccueil.setText(_translate("MainWindow", "Solver"))
        self.newGameButtonAccueil.setText(_translate("MainWindow", "Nouvelle Partie"))
        self.lastGameButton.setText(_translate("MainWindow", "Partie Sauvegard√©e"))
        self.label_hauteur_accueil.setText(_translate("MainWindow", "Hauteur :"))
        self.label_largeur_accueil.setText(_translate("MainWindow", "Largeur :"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)

    AccueilWindow = QtWidgets.QMainWindow()
    SolverWindow =QtWidgets.QMainWindow()
    SolutionWindow = QtWidgets.QMainWindow()
    NewGameWindow = QtWidgets.QMainWindow()

    SolverUi = Ui_SolverWindow()
    SudokuUi = Ui_MainWindow()
    SudokuUi.accueil(AccueilWindow)
    AccueilWindow.show()

    sys.exit(app.exec_())
